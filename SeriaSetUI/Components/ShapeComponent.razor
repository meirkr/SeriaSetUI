@using Blazor.Extensions
@using Blazor.Extensions.Canvas.Canvas2D
@using GeometRi
@using SeriaSetUI.Draw
@using SeriaSetUI.Models
@using Triangle = SeriaSetUI.Models.Triangle

<BECanvas Width="80" Height="40" @ref="CanvasReference"></BECanvas>


@code {
    private Canvas2DContext _context;
    protected BECanvasComponent CanvasReference;
    [Parameter]
    public IShape Shape { get; set; }
    protected void Refresh()
    {
        base.StateHasChanged();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        this._context = await this.CanvasReference.CreateCanvas2DAsync();

        await this._context.ClearRectAsync(0, 0, 300, 400);


        var drawing = GetDrawing(Shape);

        await drawing.Draw();
    }

    private IDrawing GetDrawing(IShape shape)
    {
        IDrawing drawing;
        switch (shape)
        {
            case Rectangle _:
                drawing = new RectDrawing(_context);
                break;
            case Triangle _:
                drawing = new TriangleDrawing(_context);
                break;
            case Elipse _:
                drawing = new ElipseDrawing(_context);
                break;
            default:
                throw new NotSupportedException($"Unsupported type: {shape.GetType()}");
        }
        drawing.Shape = shape;

        return drawing;
    }

}
